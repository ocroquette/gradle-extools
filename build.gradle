plugins {
    id 'groovy'
    id 'maven-publish'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.11.0'
}

apply plugin: 'java-gradle-plugin'

rootProject.group='com.github.ocroquette'
rootProject.version='2.6-SNAPSHOT'

java {
    toolchain {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

pluginBundle {
    website = 'https://github.com/ocroquette/gradle-extools'
    vcsUrl = 'https://github.com/ocroquette/gradle-extools.git'

    plugins {
        extoolsPlugin {
            id = 'com.github.ocroquette.extools'
            displayName = 'External tools plugin'
            description = 'A plugin that allows to download and use external tools like compilers or IDE automatically'
            tags = ["tools", "compilers"]
            // version = ''
        }
    }
}

dependencies {
    implementation gradleApi()

    testImplementation gradleTestKit()
    testImplementation platform("org.spockframework:spock-bom:2.0-groovy-3.0")
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.spockframework:spock-junit4"  // for old JUnit 4 rules
    testImplementation "com.github.tomakehurst:wiremock:2.10.1"
    testImplementation "org.apache.commons:commons-text:1.1"
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

task(zipDummyTools) {
    description "Creates the ZIP files for the dummy tools used in the unit tests"
    final resourceDir = new File(projectDir, "src/test/resources/extools")
    final targetDir = new File(buildDir, "test/repo")
    def toolIds = []
    resourceDir.eachFileRecurse {
        if ( it.name == "extools.conf" ) {
            toolIds += resourceDir.toPath().relativize( it.toPath() ).toFile().parentFile.toString()
        }
    }
    inputs.files(fileTree(resourceDir) {
        exclude "**/*.zip"
    })
    outputs.files( toolIds.collect { new File(targetDir, it + ".zip") })

    doLast {
        toolIds.each { toolId ->
            def srcDir = new File(resourceDir, toolId)
            def destFile = new File(targetDir, "${toolId}.zip")
            destFile.parentFile.mkdirs()
            if(System.getProperty("os.name").toLowerCase().contains("windows")) {
                ant.zip(destfile: destFile) {
                    fileset(dir: srcDir)
                }
            }
            else {
                // Use system zip to preserve permissions
                project.exec {
                    commandLine "/usr/bin/zip", "--recurse-paths", "--quiet", destFile.absolutePath, "."
                    workingDir srcDir
                }
            }
        }
    }
}

test.dependsOn zipDummyTools

task doRelease {
    doLast {
        def buildGradle = new File("build.gradle")
        def matcher = (buildGradle.text =~ /.*rootProject.version='([\d]+)\.([\d]+)-SNAPSHOT'/)
        def major = Integer.parseInt(matcher[0][1])
        def minor = Integer.parseInt(matcher[0][2])

        def oldVersion = "${major}.${minor}"
        def newVersion = "${major}.${minor+1}"

        ant.replace(file: buildGradle, token: "rootProject.version='${oldVersion}-SNAPSHOT'", value: "rootProject.version='${oldVersion}'")

        exec {
            commandLine "git", "commit", "-a", "-m", "v${oldVersion}"
        }
        exec {
            commandLine "./gradlew", "publishplugins"
        }
        exec {
            commandLine "git", "tag", "v${oldVersion}"
        }

        ant.replace(file: buildGradle, token: "rootProject.version='${oldVersion}'", value: "rootProject.version='${newVersion}-SNAPSHOT'")

        exec {
            commandLine "git", "commit", "-a", "-m", "Started v${newVersion}"
        }

        exec {
            commandLine "git", "push"
        }

        exec {
            commandLine "git", "push", "--tags"
        }
    }
}

