// This build script is called from ExtoolsPluginExtoolsExecAliasesTest, please see there for more details

plugins {
    // We have to use the plugins DSL syntax in our tests because of TestKit, see
    // https://docs.gradle.org/4.3/userguide/test_kit.html#sub:test-kit-automatic-classpath-injection
    // "Itâ€™s important to note that the mechanism currently only works if the plugin under test is applied using
    // the plugins DSL. If the target Gradle version is prior to 2.8, automatic plugin classpath injection is
    // not performed."
    id 'com.github.ocroquette.extools'
}

import com.github.ocroquette.extools.tasks.ExtoolExec

extools {
    tools "alias_1": "dummy_1",
          "alias_2": "dummy_1",
          "alias_3": "dummy_2"
}

def isWindows = ( System.getProperty("os.name").toLowerCase().contains("windows") ? true : false )
def scriptExtension = ( isWindows ? "bat" : "sh" )

task execDummy1(type:ExtoolExec) {
    usingExtools "dummy_1"

    commandLine "dummy_1.$scriptExtension"
}

task execUsingInvalid(type:ExtoolExec) {
    usingExtools "invalid_alias"

    commandLine "dummy_1.$scriptExtension"
}

task execAlias1(type:ExtoolExec) {
    usingExtools "alias_1"

    commandLine "dummy_1.$scriptExtension"
}

task execAlias2(type:ExtoolExec) {
    usingExtools "alias_2"

    commandLine "dummy_1.$scriptExtension"
}

task getValueExisting {
    dependsOn "extoolsLoad"

    doLast {
        println "Value of PATH for alias_1: " + project.extensions.extools.getValue("alias_1", "PATH")
    }
}

task getValueMissing {
    dependsOn "extoolsLoad"

    doLast {
        println "Value of DUMMY1_VAR_MISSING for alias_1: " + println project.extensions.extools.getValue("alias_1", "DUMMY1_VAR_MISSING")
    }
}

task getValueWithDefaultExisting {
    dependsOn "extoolsLoad"

    doLast {
        println "Value of PATH for alias_1: " + project.extensions.extools.getValueWithDefault("alias_1", "PATH", "Default value for PATH")
    }
}

task getValueWithDefaultMissing {
    dependsOn "extoolsLoad"

    doLast {
        println "Value of DUMMY1_VAR_MISSING for alias_1: " + project.extensions.extools.getValueWithDefault("alias_1", "DUMMY1_VAR_MISSING", "Default value for DUMMY1_VAR_MISSING")
    }
}


task accessHomeDir {
    dependsOn "extoolsLoad"

    doLast {
        println "alias_1_home=" + project.extensions.extools.getHomeDir("alias_1").canonicalPath
    }
}

task resolveAlias {
    dependsOn "extoolsLoad"

    doLast {
        println "alias_1=" + project.extensions.extools.resolveAlias("alias_1")
    }
}

task getLoadedAliases {
    dependsOn "extoolsLoad"

    doLast {
        println "aliases=" + project.extensions.extools.getLoadedAliases().join(",")
    }
}


task generateEnvironmentScript {
    dependsOn "extoolsLoad"

    doLast {
        println "generatedScript=" + project.extensions.extools.generateEnvironmentScript("alias_3") + "\n/generatedScript"
    }
}

task execAlias3WithOverride {
    dependsOn "extoolsLoad"

    doLast {
        // Since EXTOOL_ALIAS_3_OVERRIDE is set to the path of "dummy_1", this is actually using "dummy_1"
        println "alias_3_home=" + project.extensions.extools.getHomeDir("alias_3").canonicalPath
        extoolexec {
            usingExtools "alias_3"
            commandLine "dummy_1.$scriptExtension"
        }
    }
}

task verifyHasAlias {
    dependsOn "extoolsLoad"

    doLast {
        if ( ! project.extensions.extools.hasAlias("alias_1") ) {
            throw new RuntimeException('hasAlias("alias_1") should return true')
        }
        if ( project.extensions.extools.hasAlias("alias_invalid") ) {
            throw new RuntimeException('hasAlias("alias_invalid") should return false')
        }
    }
}


