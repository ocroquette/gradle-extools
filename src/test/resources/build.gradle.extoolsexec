// This build script is called from ExtoolsPluginExtoolsExecTest, please see there for more details

plugins {
    // We have to use the plugins DSL syntax in our tests because of TestKit, see
    // https://docs.gradle.org/4.3/userguide/test_kit.html#sub:test-kit-automatic-classpath-injection
    // "Itâ€™s important to note that the mechanism currently only works if the plugin under test is applied using
    // the plugins DSL. If the target Gradle version is prior to 2.8, automatic plugin classpath injection is
    // not performed."
    id 'com.github.ocroquette.extools'
}

import com.github.ocroquette.extools.tasks.ExtoolExec

extools {
    tool "dummy_1"
    tool "dummy_2"
    tool "printenvvars"
    tool "printargs"
    tool "subdir/dummy_3"

    usingExtools "dummy_2"
}

def isWindows = ( System.getProperty("os.name").toLowerCase().contains("windows") ? true : false )
def scriptExtension = ( isWindows ? "bat" : "sh" )

task execDummy1(type:ExtoolExec) {
    usingExtools "dummy_1"

    commandLine "dummy_1.$scriptExtension"
}

task execDummy1ThenDummy2 {
    dependsOn "extoolsLoad"
    doLast {
        extoolexec {
            usingExtools "dummy_1"
            executable "dummy_1.$scriptExtension"
        }
        extoolexec {
            executable "dummy_2.$scriptExtension"
        }
    }
}

task execMissingDependency {
    // The following line is missing, expect a useful exception:
    // dependsOn "extoolsLoad"
    doLast {
        extoolexec {
            usingExtools "dummy_1"
            executable "dummy_1.$scriptExtension"
        }
    }
}

task execDummy2(type:ExtoolExec) {
    String myString = "string"
    def myGString = "$myString" // Make sure the plugin can cope with GString's
    commandLine "dummy_2.$scriptExtension", myGString
}

task execBackground(type:ExtoolExec) {
    commandLine "background.$scriptExtension", "%tempFile1%", "%tempFile2%"
    runInBackground true
}

task prependEnvPath(type:ExtoolExec) {
    usingExtools "printenvvars"
    prependEnvPaths "PATH": new File("."), // Test with file
        "NEW_PATH": ["new_path", "new_path2"] // Test with strings
    commandLine "printenvvars.$scriptExtension", "%dumpFile%"
}

task execPrintEnvVarsWithInvalidPath(type:ExtoolExec) {
    usingExtools "dummy_1"

    commandLine "printenvvars.$scriptExtension", "%dumpFile%"
}

task execPrintEnvVarsWithImplicitPath(type:ExtoolExec) {
    usingExtools "printenvvars"

    commandLine "printenvvars.$scriptExtension", "%dumpFile%"
}

task execToolInSubdir(type:ExtoolExec) {
    usingExtools "subdir/dummy_3"

    commandLine "dummy_3.$scriptExtension"
}

task execPrintEnvVarsWithEnvironmentVariableSingle(type:ExtoolExec) {
    usingExtools "printenvvars"

    commandLine "printenvvars.$scriptExtension", "%dumpFile%"
}

task execUseAll(type:ExtoolExec) {
    // Unorder the list, we check if the variables are set in the right order in the test
    usingExtools "dummy_1", "printenvvars", "printargs", "subdir/dummy_3"
    commandLine "printenvvars.$scriptExtension", "%dumpFile%"
}


task passFileAsArgument(type:ExtoolExec) {
    usingExtools "printargs"
    commandLine "printargs.$scriptExtension", new File("a_file")
}


task execSystemCommand(type:ExtoolExec) {
    if ( isWindows ) {
        commandLine "cmd", "/c", "dir"
    }
    else {
        commandLine "ls"
    }
}
